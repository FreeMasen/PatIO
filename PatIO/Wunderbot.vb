Imports System.Net
Imports System.IO
Imports System.Xml

Public Class Wunderbot


    'Functions this class has:
    'url(zipcode)
    'creates a query link using provided zip code

    'getQueryInfo()
    'uses query link generated by url() to gather information from wunderground.com
    'dumps all relevant info into an arraylist full of xmlnodelists

    'getDayInfo(day)
    'returns all of the information for one day in this order (will need to be cstr'd)
    '0           1      2      3     4     5        6        7        8        9         10
    'conditions, cHigh, fHigh, cLow, fLow, Rain mm, Rain in, Snow cm, Rain in, Wind kph, Wind mph
    'data is returned as an arraylist

    'an arraylist for returning the results of the query
    Private _queryResults As New ArrayList
    Public Property queryResults As ArrayList
        Get
            Return _queryResults
        End Get
        Set(value As ArrayList)
            _queryResults = value
        End Set
    End Property

    'arraylist for returning information on a day by day basis
    Private _weatherDay As New ArrayList
    Public Property weatherDay As ArrayList
        Get
            Return _weatherDay
        End Get
        Set(value As ArrayList)
            _weatherDay = value
        End Set
    End Property

    '--ACQUIRING QUERY--'
    Private _queryurl As String
    Public Property queryurl As String
        Get
            Return _queryurl
        End Get
        Set(value As String)
            _queryurl = value
        End Set
    End Property

    Public Sub url(city As String, state As String)
        'sets the query URL to a compiled string using the zip code provided
        Dim correcteCity As String
        If city.Contains(" ") Then
            city.Replace(" ", "_")
        End If
        correcteCity = city
        queryurl = String.Format("http://api.wunderground.com/api/93fe923d53b2305e/forecast10day/q/{0}/{1}.xml", state.ToUpper, correcteCity)
    End Sub

    Public Sub getQueryInfo()
        'make sure arraylist is empty before starting
        queryResults.Clear()
        Try
            'creates a request using acquired url
            If queryurl = "" Then
                Throw New System.Exception()
            End If
            'need exception for invalid query
            Dim query As WebRequest = WebRequest.Create(queryurl)

            'need exception for information not gathered
            Dim weatherstream As Stream = query.GetResponse.GetResponseStream()

            'create xml document
            Dim weather As New XmlDocument

            'create an exception here for if the xml document is blank (bad URL)

            'load the xml stream
            weather.Load(weatherstream)

            'add information gathering from xml document here

            'test information
            Dim day1tempnode As XmlNode = weather.SelectSingleNode("//celsius")

            'define Xpath
            Dim thisXpath As String = "/response/simpleforcast/forecastdays/*"
            'a secondary xpath for further extending into the tree
            Dim furtherXpath As String = "/response/simpleforcast/forecastdays/"

            'creates an arraylist full of xmlnodelists, each xmlnodelist containing
            'all of the information for one condition, over 10 days.

            'conditions
            Dim conditions As XmlNodeList
            conditions = weather.SelectNodes("//conditions")
            queryResults.Add(conditions)
            'create a list of celsius highs
            Dim cHigh As XmlNodeList
            cHigh = weather.SelectNodes("//high/celsius")
            queryResults.Add(cHigh)
            'fahrenheit highs
            Dim fHigh As XmlNodeList
            fHigh = weather.SelectNodes("//high/fahrenheit")
            queryResults.Add(fHigh)
            'celsius lows
            Dim cLow As XmlNodeList
            cLow = weather.SelectNodes("//low/celsius")
            queryResults.Add(cLow)
            'fahrenheit lows'
            Dim fLow As XmlNodeList
            fLow = weather.SelectNodes("//low/fahrenheit")
            queryResults.Add(fLow)
            'rain in mm
            Dim mmRain As XmlNodeList
            mmRain = weather.SelectNodes("//qpf_day/mm")
            queryResults.Add(mmRain)
            'rain in in
            Dim inRain As XmlNodeList
            inRain = weather.SelectNodes("//qpf_day/in")
            queryResults.Add(inRain)
            'snow in mm
            Dim mmSnow As XmlNodeList
            mmSnow = weather.SelectNodes("//snow_day/cm")
            queryResults.Add(mmSnow)
            'snow in in
            Dim inSnow As XmlNodeList
            inSnow = weather.SelectNodes("//snow_day/in")
            queryResults.Add(inSnow)
            'wind in kph
            Dim kWind As XmlNodeList
            kWind = weather.SelectNodes("//avewind/kph")
            queryResults.Add(kWind)
            'wind im mph
            Dim mWind As XmlNodeList
            mWind = weather.SelectNodes("//avewind/mph")
            queryResults.Add(mWind)

            Exit Sub
        Catch ex As Exception When queryurl = ""
            'url could be not created/acquired
            MessageBox.Show("Could not create query URL (wunderground.com)")
        End Try
    End Sub

    Public Function getDayInfo(day As Integer) As ArrayList
        'clear any old data before starting
        weatherDay.Clear()

        'a temporary xmlnodelist to store data from other lists
        Dim nodes As XmlNodeList

        'loop through each set of results in queryResults sub-lists, adding appropriate data.
        For i As Integer = 0 To 10
            'sets the temp nodelist to each subset of queryResults, in order
            nodes = CType(queryResults.Item(i), XmlNodeList)
            'add the appropriate data value to the weatherDay arraylist
            weatherDay.Add(nodes.Item(day).InnerText)
        Next

        'return compiled list
        Return weatherDay
    End Function

    Public Sub setWeather(Day As ArrayList)

        Me.temp = Day(2).ToString
        Me.condition = Day(0).ToString
        Me.outside = setOutside()


    End Sub


    Private _outside As Boolean
    Public Property outside As Boolean
        Get
            Return _outside
        End Get
        Set(value As Boolean)
            _outside = value
        End Set
    End Property
    Private _temperature As Integer
    Public Property temp As String
        Get
            Return String.Format("{0}º", _temperature.ToString)
        End Get
        Set(value As String)
            _temperature = CInt(value)
        End Set
    End Property
    Private _condition As String
    Public Property condition As String
        Get
            Return _condition
        End Get
        Set(value As String)
            _condition = value
        End Set
    End Property

    Private Function setOutside() As Boolean
        Me.outside = False
        If CInt(Me._temperature) > 67 Then
            If Me.condition = "Clear" Then
                me.outside = True
            ElseIf Me.condition = "Partly Cloudy" Then
                Me.outside = True
            End If
        End If

        Return Me.outside
    End Function
End Class
